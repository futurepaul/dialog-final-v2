namespace dialog {};

dictionary Note {
    string id;
    string text;
    sequence<string> tags;
    i64 created_at;
    boolean is_read;
    boolean is_synced;
};

dictionary TagCount {
    string tag;
    u32 count;
};

[Enum]
interface Event {
    Ready();
    NotesLoaded(sequence<Note> notes);
    NoteAdded(Note note);
    NoteUpdated(Note note);
    NoteDeleted(string id);
    TagFilterChanged(string? tag);
    SyncStatusChanged(boolean syncing);
    Error(string message);
};

[Enum]
interface SyncMode {
    Negentropy();
    Subscribe();
};

[Enum]
interface Command {
    ConnectRelay(string relay_url);
    CreateNote(string text);
    DeleteNote(string id);
    MarkAsRead(string id);
    SetTagFilter(string? tag);
    LoadNotes(u32 limit);
    SearchNotes(string query);
    SetSyncMode(SyncMode mode);
};

callback interface DialogListener {
    void on_event(Event event);
};

interface DialogClient {
    constructor(string nsec);
    
    // Fire-and-forget: spawns listener on background thread
    void start(DialogListener listener);
    void stop();
    
    // Fire-and-forget: spawns work on Tokio runtime
    void send_command(Command cmd);
    
    // Fast synchronous queries from memory
    sequence<Note> get_notes(u32 limit, string? tag);
    sequence<string> get_all_tags();
    Note? get_note(string id);
    u32 get_unread_count(string? tag);
    sequence<TagCount> get_tag_counts();
    void clear_data_for_current_pubkey();
    // Setup helpers (instance methods for now)
    boolean validate_nsec(string nsec);
    string derive_npub(string nsec);
};

// Utility interface for key operations before a client exists
interface KeysHelper {
    constructor();
    string generate_nsec();
    boolean validate_nsec(string nsec);
    string derive_npub(string nsec);
};
